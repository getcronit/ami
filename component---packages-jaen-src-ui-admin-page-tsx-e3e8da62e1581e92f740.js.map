{"version":3,"file":"component---packages-jaen-src-ui-admin-page-tsx-e3e8da62e1581e92f740.js","mappings":"8FAMA,IAUIA,EAAkB,SAAyBC,GAC7C,IAAIC,EAAYC,OAAOC,SAASC,KAAKC,QAAQ,KAC7CH,OAAOC,SAASG,QAAQJ,OAAOC,SAASC,KAAKG,MAAM,EAAGN,GAAa,EAAIA,EAAY,GAAK,IAAMD,IAG5FQ,EAAW,SAAkBR,GAC/B,IAfII,EACAH,EAeJ,MAAO,CACLQ,SAFaT,IAfXI,EAAOF,OAAOC,SAASC,MAEL,KADlBH,EAAYG,EAAKC,QAAQ,MACH,GAAKD,EAAKM,UAAUT,EAAY,IAgBxDU,OAAQ,KAsCZC,EAAQ,EA5Be,WACrB,IAAIC,EAAQL,IAEZ,OATwB,SAA6BK,GAC9B,KAAnBA,EAAMJ,UACRV,EAAgB,KAMlBe,CAAoBD,GACb,CACDV,eACF,OAAOK,KAGTO,iBAAkB,SAA0BC,EAAMC,GAChDf,OAAOa,iBAAiBC,EAAMC,IAEhCC,oBAAqB,SAA6BF,EAAMC,GACtDf,OAAOgB,oBAAoBF,EAAMC,IAEnCE,QAAS,CACPN,MAAOA,EACPO,UAAW,SAAmBC,EAAUC,EAAGC,GAvC9B,IAAsBvB,EAwCjCa,EAAQL,EAASe,GAxCgBvB,EAyCpBuB,EAxCZrB,OAAOC,SAASqB,KAAOxB,GA0C1ByB,aAAc,SAAsBJ,EAAUC,EAAGC,GAC/CV,EAAQL,EAASe,GACjBxB,EAAgBwB,Q,oIClCxB,IAoIA,GAjBkBG,EAAAA,EAAAA,KAAU,SAACC,GAC3B,GAAsB,oBAAXzB,OACT,OAAO,KAGT,IAAM0B,GAASC,EAAAA,EAAAA,KACTV,GAAUW,EAAAA,EAAAA,eAAcF,IAENG,EAAAA,EAAAA,KAAe,SAAAlB,GAAK,OAAIA,EAAMmB,KAAKC,mBAE3D,OACE,SAAC,EAAAC,iBAAD,CAAkBf,QAASA,EAA3B,UACE,SAAC,EAAAgB,OAAD,CAAQC,SAAS,EAAjB,SAA2C","sources":["webpack://demo/../../node_modules/hash-source/src/dist/createHashSource.js","webpack://demo/../../packages/jaen/src/ui/AdminPage.tsx"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar getHashPath = function getHashPath() {\n  var href = window.location.href;\n  var hashIndex = href.indexOf('#');\n  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);\n};\n\nvar pushHashPath = function pushHashPath(path) {\n  return window.location.hash = path;\n};\n\nvar replaceHashPath = function replaceHashPath(path) {\n  var hashIndex = window.location.href.indexOf('#');\n  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);\n};\n\nvar getState = function getState(path) {\n  var pathname = path ? path : getHashPath();\n  return {\n    pathname: pathname,\n    search: ''\n  };\n};\n\nvar resolveInitialState = function resolveInitialState(state) {\n  if (state.pathname === '') {\n    replaceHashPath('/');\n  }\n};\n\nvar createHashSource = function createHashSource() {\n  var state = getState();\n  resolveInitialState(state);\n  return {\n    get location() {\n      return getState();\n    },\n\n    addEventListener: function addEventListener(name, fn) {\n      window.addEventListener(name, fn);\n    },\n    removeEventListener: function removeEventListener(name, fn) {\n      window.removeEventListener(name, fn);\n    },\n    history: {\n      state: state,\n      pushState: function pushState(stateObj, _, uri) {\n        state = getState(uri);\n        pushHashPath(uri);\n      },\n      replaceState: function replaceState(stateObj, _, uri) {\n        state = getState(uri);\n        replaceHashPath(uri);\n      }\n    }\n  };\n};\n\nexports.default = createHashSource;","import {NotifyTab} from '@jaen/internal-plugins/notify/ui/components/tabs/Notify'\nimport {useAppSelector, withRedux} from '@jaen/redux'\nimport {\n  createHistory,\n  HistorySource,\n  LocationProvider,\n  Redirect,\n  Router,\n  useLocation,\n  RouteComponentProps,\n  useNavigate\n} from '@reach/router'\nimport createHashSource from 'hash-source'\nimport {\n  AdminPageShell as APSComponent,\n  SidebarItem\n} from './components/AdminPageShell'\n\nexport interface IAdminRoute extends SidebarItem {\n  group?: string\n  content: JSX.Element\n}\n\nconst buildSidebarItems = (routes: Array<IAdminRoute>) => {\n  const grouped: {\n    [group: string]: {label: string; items: Array<SidebarItem>}\n  } = {}\n  const ungrouped: Array<SidebarItem> = []\n\n  for (const route of routes) {\n    if (route.group) {\n      if (!grouped[route.group]) {\n        grouped[route.group] = {\n          label: route.group,\n          items: []\n        }\n      }\n\n      grouped[route.group].items.push(route)\n    } else {\n      ungrouped.push(route)\n    }\n  }\n\n  return {\n    grouped,\n    ungrouped\n  }\n}\n\nconst AdminPageShell = (props: RouteComponentProps) => {\n  const navigate = useNavigate()\n\n  const windowPathname =\n    typeof window !== 'undefined' ? window.location.hash : ''\n\n  const routes = {\n    '/': <>Dashboard</>,\n    '/pages': <PagesC />,\n    '/files': <FilesContainer />,\n    '/notifications': <NotifyTab />,\n    '/settings': <SettingsContainer />\n  }\n  //const routes: IAdminRoute[] =\n  //pluginStore.executeFunction(AdminFunctions.getRoutes) || []\n  //const sidebarItems = React.useMemo(() => buildSidebarItems(routes), [routes])\n\n  const activeRoute = React.useMemo(() => {\n    let pathname = windowPathname.split('#')[1]\n\n    // prepend slash if needed\n    if (pathname?.charAt(0) !== '/') {\n      pathname = `/${pathname}`\n    }\n\n    for (const [path, content] of Object.entries(routes)) {\n      if (path === pathname) {\n        return {path, content}\n      }\n    }\n\n    const routeZero = Object.entries(routes)[0]\n\n    if (routeZero) {\n      return {path: routeZero[0], content: routeZero[1]}\n    }\n\n    throw new Error('No routes found')\n  }, [windowPathname])\n\n  const handleSidebarItemClick = React.useCallback(\n    (path: string) => navigate(path),\n    [navigate]\n  )\n\n  return (\n    <APSComponent\n      toolbar={<AdminToolbar />}\n      sidebarItems={{\n        activePath: activeRoute.path,\n        ungrouped: [\n          {\n            path: '/',\n            icon: <BsHouse />,\n            label: 'Home'\n          }\n        ],\n        grouped: {\n          site: {\n            label: 'Your Site',\n            items: [\n              {\n                path: '/pages',\n                icon: <FaPager />,\n                label: 'Pages'\n              },\n              {\n                path: '/files',\n                icon: <BsFiles />,\n                label: 'Files'\n              },\n              {\n                path: '/notifications',\n                icon: <BiNotification />,\n                label: 'Notifications'\n              }\n            ]\n          }\n        }\n      }}\n      content={activeRoute.content}\n      onSidebarItemClick={handleSidebarItemClick}\n      onSettingsClick={() => navigate('/settings')}\n      onHelpClick={() => {}}\n    />\n  )\n}\n\nconst AdminPage = withRedux((props: any) => {\n  if (typeof window === 'undefined') {\n    return null\n  }\n\n  const source = createHashSource()\n  const history = createHistory(source as HistorySource)\n\n  const isAuthenticated = useAppSelector(state => state.auth.isAuthenticated)\n\n  return (\n    <LocationProvider history={history}>\n      <Router primary={false}>{isAuthenticated ? null : null}</Router>\n    </LocationProvider>\n  )\n})\n\nexport default AdminPage\n"],"names":["replaceHashPath","path","hashIndex","window","location","href","indexOf","replace","slice","getState","pathname","substring","search","exports","state","resolveInitialState","addEventListener","name","fn","removeEventListener","history","pushState","stateObj","_","uri","hash","replaceState","withRedux","props","source","createHashSource","createHistory","useAppSelector","auth","isAuthenticated","LocationProvider","Router","primary"],"sourceRoot":""}