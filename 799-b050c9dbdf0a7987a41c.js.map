{"version":3,"file":"799-b050c9dbdf0a7987a41c.js","mappings":"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","sources":["webpack://vienna-hotels/./node_modules/@jaenjs/jaen/src/internal-plugins/notify/ui/components/NotifyTableRow.tsx","webpack://vienna-hotels/./node_modules/@jaenjs/jaen/src/internal-plugins/notify/ui/components/NotifyTableCard.tsx","webpack://vienna-hotels/./node_modules/@jaenjs/jaen/src/internal-plugins/notify/ui/components/tabs/Notify.tsx"],"sourcesContent":["import {EditIcon} from '@chakra-ui/icons'\nimport {\n  As,\n  Button,\n  Flex,\n  Icon,\n  Switch,\n  Td,\n  Text,\n  Tr,\n  useColorModeValue\n} from '@chakra-ui/react'\nimport React from 'react'\n\nexport interface NotifyTableRowProps {\n  name: string\n  description: string\n  logo: As<any>\n  active: boolean\n  onSwitchActive: (active: boolean) => void\n  onEdit: () => void\n}\n\nexport function NotifyTableRow(props: NotifyTableRowProps) {\n  const {logo, name, description, active} = props\n  const textColor = useColorModeValue('gray.700', 'white')\n\n  const [isActive, setIsActive] = React.useState(active)\n\n  React.useEffect(() => {\n    setIsActive(active)\n  }, [active])\n\n  const handleSwitchActive = () => {\n    setIsActive(!isActive)\n    props.onSwitchActive(!isActive)\n  }\n\n  return (\n    <Tr>\n      <Td minWidth={{sm: '250px'}} pl=\"0px\">\n        <Flex alignItems=\"center\" py=\".8rem\" minWidth=\"100%\" flexWrap=\"nowrap\">\n          <Icon as={logo} h={'24px'} w={'24px'} me=\"18px\" />\n          <Text\n            fontSize=\"md\"\n            color={textColor}\n            fontWeight=\"bold\"\n            minWidth=\"100%\">\n            {name}\n          </Text>\n        </Flex>\n      </Td>\n      <Td>\n        <Text fontSize=\"sm\" color={textColor}>\n          {description}\n        </Text>\n      </Td>\n      <Td>\n        <Switch isChecked={isActive} onChange={handleSwitchActive} />\n      </Td>\n      <Td>\n        <Button p=\"0px\" bg=\"transparent\" onClick={props.onEdit}>\n          <Icon as={EditIcon} color=\"gray.400\" cursor=\"pointer\" />\n        </Button>\n      </Td>\n    </Tr>\n  )\n}\n\nexport default NotifyTableRow\n","// Chakra imports\nimport {\n  As,\n  Flex,\n  Table,\n  Tbody,\n  Text,\n  Th,\n  Thead,\n  Tr,\n  useColorModeValue,\n  Box\n} from '@chakra-ui/react'\nimport React from 'react'\nimport {NotifyTableRow} from './NotifyTableRow'\n\nexport interface NotifyTableProps {\n  data: Array<{\n    id: string\n    name: string\n    description: string\n    logo: As<any>\n    active: boolean\n  }>\n  onSwitchActive: (id: string, active: boolean) => void\n  onEdit: (id: string) => void\n}\n\nexport default function NotifyTableCard(props: NotifyTableProps) {\n  const textColor = useColorModeValue('gray.700', 'white')\n\n  return (\n    <Box overflowY={'auto'} maxHeight={'100vh'} minH=\"85vh\">\n      <Table variant=\"simple\" color={textColor}>\n        <Thead position=\"sticky\" top={0} bgColor={'white'}>\n          <Tr my=\".8rem\" pl=\"0px\">\n            <Th pl=\"0px\" color=\"gray.400\">\n              Name\n            </Th>\n            <Th color=\"gray.400\">Description</Th>\n            <Th color=\"gray.400\">Status</Th>\n            <Th></Th>\n          </Tr>\n        </Thead>\n\n        <Tbody>\n          {props.data.map(row => {\n            return (\n              <NotifyTableRow\n                name={row.name}\n                logo={row.logo}\n                active={row.active}\n                description={row.description}\n                key={row.id}\n                onSwitchActive={active => props.onSwitchActive(row.id, active)}\n                onEdit={() => props.onEdit(row.id)}\n              />\n            )\n          })}\n        </Tbody>\n      </Table>\n    </Box>\n  )\n}\n","import {\n  useAppDispatch,\n  useAppSelector,\n  withRedux\n} from '../../../../notify/redux'\nimport {internalActions} from '../../../../notify/redux/slices'\nimport {useNotifications} from '../../../../notify/services/notification/loader'\nimport React from 'react'\nimport NotifyTableCard from '../NotifyTableCard'\nimport {BiNotification} from 'react-icons/bi'\n\nexport const NotifyTab: React.FC = withRedux(() => {\n  const dispatch = useAppDispatch()\n  const notifications = useAppSelector(\n    state => state.internal.notifications.nodes\n  )\n\n  const [\n    previewNotificaitonElement,\n    setPreviewNotificaitonElement\n  ] = React.useState<JSX.Element | undefined>(undefined)\n\n  const allNotifyComponent = useNotifications()\n\n  const handleNotificationActiveSwitch = (id: string, active: boolean) => {\n    if (active) {\n      dispatch(internalActions.setActive(id))\n    } else {\n      dispatch(internalActions.setInactive(id))\n    }\n  }\n\n  const handleNotificationEdit = (id: string) => {\n    dispatch(internalActions.setEditing(true))\n\n    const notify = allNotifyComponent.find(n => n.id === id)\n\n    if (notify) {\n      const {Component, notification} = notify\n\n      setPreviewNotificaitonElement(\n        <Component\n          id={id}\n          notification={notification}\n          forceOpen\n          onClose={() => {\n            dispatch(internalActions.setEditing(false))\n            setPreviewNotificaitonElement(undefined)\n          }}\n        />\n      )\n    }\n  }\n\n  const data = allNotifyComponent.map(item => ({\n    id: item.id,\n    name: item.Component.options.displayName,\n    description: item.Component.options.description,\n    logo: item.Component.options.logo || BiNotification,\n    active:\n      notifications[item.id]?.active !== undefined\n        ? notifications[item.id]?.active\n        : item.isActive\n  }))\n\n  return (\n    <>\n      {previewNotificaitonElement}\n      <NotifyTableCard\n        data={data}\n        onSwitchActive={handleNotificationActiveSwitch}\n        onEdit={handleNotificationEdit}\n      />\n    </>\n  )\n})\n\nexport default NotifyTab\n"],"names":["NotifyTableRow","props","logo","name","description","active","textColor","useColorModeValue","React","isActive","setIsActive","Tr","Td","minWidth","sm","pl","Flex","alignItems","py","flexWrap","as","h","w","me","Text","fontSize","color","fontWeight","isChecked","onChange","onSwitchActive","p","bg","onClick","onEdit","EditIcon","cursor","NotifyTableCard","Box","overflowY","maxHeight","minH","variant","position","top","bgColor","my","Th","data","map","row","id","NotifyTab","withRedux","dispatch","useAppDispatch","notifications","useAppSelector","state","internal","nodes","undefined","previewNotificaitonElement","setPreviewNotificaitonElement","allNotifyComponent","useNotifications","item","Component","options","displayName","BiNotification","internalActions","notify","find","n","notification","forceOpen","onClose"],"sourceRoot":""}