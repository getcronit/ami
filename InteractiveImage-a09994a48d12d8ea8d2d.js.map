{"version":3,"file":"InteractiveImage-a09994a48d12d8ea8d2d.js","mappings":"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","sources":["webpack://jaen-template-shopify/./node_modules/@jaenjs/jaen/src/internal-plugins/pages/fields/ImageField/components/UpdateModal/index.tsx","webpack://jaen-template-shopify/./node_modules/@jaenjs/jaen/src/internal-plugins/pages/fields/ImageField/InteractiveImage.tsx"],"sourcesContent":["import {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Image,\n  Input,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  Textarea,\n  useToast\n} from '@chakra-ui/react'\nimport {useSnekFinder} from '@jaenjs/snek-finder'\nimport * as React from 'react'\nimport {useForm} from 'react-hook-form'\n\ntype FormData = {\n  image: string\n  title: string\n  description: string\n}\n\nexport interface UpdateModalProps {\n  isOpen: boolean\n  onClose: () => void\n  onUpdate: (data: FormData) => void\n  onDelete: () => void\n  data: FormData\n}\n\nexport const UpdateModal = ({\n  isOpen,\n  onClose,\n  onUpdate,\n  onDelete,\n  data\n}: UpdateModalProps) => {\n  const toast = useToast()\n\n  const [defaultValues, setDefaultValues] = React.useState(data)\n\n  React.useEffect(() => {\n    setDefaultValues(data)\n    reset(data)\n  }, [data])\n\n  const {\n    register,\n    reset,\n    handleSubmit,\n    formState: {errors, isSubmitting, isDirty}\n  } = useForm<FormData>({\n    defaultValues\n  })\n\n  const finder = useSnekFinder({\n    mode: 'selector',\n    onSelect: ({src, name, description}) => {\n      onUpdate({\n        image: src,\n        title: name,\n        description: description || ''\n      })\n    }\n  })\n\n  const handleDelete = () => {\n    onDelete()\n\n    toast({\n      title: 'Deleted',\n      description: 'The image has been cleared from the field.',\n      status: 'success',\n      duration: 5000,\n      isClosable: true\n    })\n\n    onClose()\n  }\n\n  const onSubmit = (values: FormData) => {\n    onUpdate(values)\n\n    toast({\n      title: 'Success',\n      description: 'The image has been updated',\n      status: 'success',\n      duration: 5000,\n      isClosable: true\n    })\n\n    onClose()\n  }\n\n  const handleImageClick = () => {\n    finder.toggleSelector()\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} size={'3xl'}>\n      {finder.finderElement}\n      <ModalOverlay />\n      <ModalContent>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <ModalHeader>Update Image</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Flex>\n              <Box flex=\"1\" p=\"4\">\n                <FormControl isRequired isInvalid={!!errors.title}>\n                  <FormLabel htmlFor=\"title\">Title</FormLabel>\n                  <Input\n                    placeholder=\"Title\"\n                    {...register('title', {\n                      required: 'This is required',\n                      maxLength: {value: 80, message: 'Max length is 80'}\n                    })}\n                  />\n                  <FormErrorMessage>{errors?.title?.message}</FormErrorMessage>\n                </FormControl>\n                <FormControl isRequired isInvalid={!!errors.description}>\n                  <FormLabel htmlFor=\"description\">Description (alt)</FormLabel>\n                  <Textarea\n                    maxH=\"15vh\"\n                    placeholder=\"Description\"\n                    {...register('description', {\n                      required: 'This is required',\n                      maxLength: {value: 140, message: 'Max length is 140'}\n                    })}\n                  />\n                  <FormErrorMessage>\n                    {errors?.description?.message}\n                  </FormErrorMessage>\n                </FormControl>\n              </Box>\n              <Image\n                h=\"300px\"\n                w=\"300px\"\n                cursor={isSubmitting ? 'not-allowed' : 'pointer'}\n                objectFit={'cover'}\n                src={data.image}\n                onClick={handleImageClick}\n              />\n            </Flex>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button mr=\"4\" colorScheme=\"red\" onClick={handleDelete}>\n              Delete\n            </Button>\n\n            <Button\n              colorScheme=\"blue\"\n              mr={4}\n              isLoading={isSubmitting}\n              isDisabled={!isDirty}\n              type=\"submit\">\n              Save\n            </Button>\n          </ModalFooter>\n        </form>\n      </ModalContent>\n    </Modal>\n  )\n}\n\nexport default UpdateModal\n","import {Box, BoxProps, useDisclosure} from '@chakra-ui/react'\nimport {withSnekFinder} from '../../../../withSnekFinder'\nimport {useSnekFinder} from '@jaenjs/snek-finder'\nimport {getSrc} from 'gatsby-plugin-image'\nimport React from 'react'\nimport {ImageFieldData} from '.'\nimport UpdateModal from './components/UpdateModal'\n\nexport interface IInteractiveImageProps extends BoxProps {\n  data: {\n    gatsbyImage: ImageFieldData['gatsbyImage']\n    internalImageUrl?: string | null\n    alt?: string\n    title?: string\n  }\n  image: JSX.Element\n  handleUpdateValue: (data: {\n    internalImageUrl?: string | null\n    alt?: string\n    title?: string\n  }) => void\n}\n\nexport const InteractiveImage: React.FC<IInteractiveImageProps> =\n  withSnekFinder(({data, handleUpdateValue, image, ...rest}) => {\n    const updateDisclosure = useDisclosure()\n\n    const finder = useSnekFinder({\n      mode: 'selector',\n      onSelect: ({src, name, description}) => {\n        handleUpdateValue({\n          internalImageUrl: src,\n          title: name,\n          alt: description\n        })\n      }\n    })\n\n    const handleBoxClick = () => {\n      if (updateable) {\n        updateDisclosure.onOpen()\n      } else {\n        finder.toggleSelector()\n      }\n    }\n\n    const gatsbyImageSrc = data.gatsbyImage && getSrc(data.gatsbyImage)\n    let updateable = false\n\n    // check if internalImageUrl is a string\n    if (\n      data.internalImageUrl !== null &&\n      (!!data?.internalImageUrl || !!data.gatsbyImage)\n    ) {\n      updateable = true\n    }\n\n    return (\n      <>\n        {finder.finderElement}\n        <UpdateModal\n          {...updateDisclosure}\n          data={{\n            image: data.internalImageUrl || gatsbyImageSrc || '',\n            description: data?.alt || '',\n            title: data?.title || ''\n          }}\n          onUpdate={({image: internalImageUrl, description: alt, title}) => {\n            handleUpdateValue({\n              internalImageUrl,\n              alt,\n              title\n            })\n          }}\n          onDelete={() => handleUpdateValue({internalImageUrl: null})}\n        />\n\n        <Box\n          {...rest}\n          onClick={handleBoxClick}\n          cursor={updateable ? 'pointer' : 'default'}>\n          {image}\n        </Box>\n      </>\n    )\n  })\n\nexport default InteractiveImage\n"],"names":["isOpen","onClose","onUpdate","onDelete","data","toast","useToast","React","defaultValues","setDefaultValues","reset","useForm","register","handleSubmit","formState","errors","isSubmitting","isDirty","finder","useSnekFinder","mode","onSelect","src","name","description","image","title","size","finderElement","onSubmit","values","status","duration","isClosable","Flex","Box","flex","p","isRequired","isInvalid","htmlFor","placeholder","required","maxLength","value","message","maxH","h","w","cursor","objectFit","onClick","toggleSelector","mr","colorScheme","isLoading","isDisabled","type","InteractiveImage","withSnekFinder","handleUpdateValue","rest","updateDisclosure","useDisclosure","internalImageUrl","alt","gatsbyImageSrc","gatsbyImage","getSrc","updateable","onOpen"],"sourceRoot":""}