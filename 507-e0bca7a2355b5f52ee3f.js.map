{"version":3,"file":"507-e0bca7a2355b5f52ee3f.js","mappings":"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","sources":["webpack://demo/../../packages/jaen/src/ui/components/Settings/FieldGroup.tsx","webpack://demo/../../packages/jaen/src/ui/components/Settings/LanguageSelect.tsx","webpack://demo/../../packages/jaen/src/ui/components/Settings/index.tsx","webpack://demo/../../packages/jaen/src/ui/SettingsTab.tsx"],"sourcesContent":["import { Box, Heading, Stack, StackProps } from '@chakra-ui/react'\nimport * as React from 'react'\n\ninterface FieldGroupProps extends StackProps {\n  title?: string\n}\n\nexport const FieldGroup = (props: FieldGroupProps) => {\n  const { title, children, ...flexProps } = props\n  return (\n    <Stack direction={{ base: 'column', md: 'row' }} spacing=\"6\" py=\"4\" {...flexProps}>\n      <Box minW=\"3xs\">\n        {title && (\n          <Heading as=\"h2\" fontWeight=\"semibold\" fontSize=\"lg\" flexShrink={0}>\n            {title}\n          </Heading>\n        )}\n      </Box>\n      {children}\n    </Stack>\n  )\n}\n","import { FormControl, FormLabel, Select, SelectProps } from '@chakra-ui/react'\nimport * as React from 'react'\n\nexport const LanguageSelect = (props: SelectProps) => (\n  <FormControl id=\"language\">\n    <FormLabel>Display Language</FormLabel>\n    <Select maxW=\"2xs\" {...props}>\n      <option>English</option>\n      <option>Hebrew</option>\n      <option>Arabic</option>\n    </Select>\n  </FormControl>\n)\n","import {\n  Avatar,\n  Box,\n  Button,\n  ButtonGroup,\n  Checkbox,\n  FormControl,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n  Heading,\n  HStack,\n  Input,\n  Stack,\n  StackDivider,\n  Text,\n  Textarea,\n  useColorModeValue,\n  useToast,\n  VStack\n} from '@chakra-ui/react'\nimport * as React from 'react'\nimport {HiCloudUpload} from 'react-icons/hi'\nimport {FieldGroup} from './FieldGroup'\nimport {LanguageSelect} from './LanguageSelect'\n\nimport {Controller, useForm} from 'react-hook-form'\nimport {ISite} from '@jaen/types'\nimport {useSnekFinder} from '@jaenjs/snek-finder'\n\ntype FormDataType = ISite\n\nexport interface SettingsTabProps {\n  data: FormDataType\n  onUpdate: (data: FormDataType) => void\n}\n\nexport const SettingsTab = ({data, onUpdate}: SettingsTabProps) => {\n  const toast = useToast()\n  const [defaultValues, setDefaultValues] = React.useState(data)\n\n  React.useEffect(() => {\n    setDefaultValues(data)\n    reset(data)\n  }, [data])\n\n  const {\n    register,\n    reset,\n    handleSubmit,\n    setValue,\n    control,\n    formState: {errors, isSubmitting, isDirty, isValid}\n  } = useForm<FormDataType>({\n    defaultValues\n  })\n\n  const [finderReference, setFinderReference] = React.useState<any | null>(null)\n\n  const finder = useSnekFinder({\n    mode: 'selector',\n    onAction: action => {\n      if (action.type === 'SELECTOR_SELECT') {\n        const imageUrl = action.payload.item.src\n\n        if (finderReference) {\n          setValue(finderReference, imageUrl, {\n            shouldDirty: true\n          })\n\n          setFinderReference(null)\n        }\n      }\n    }\n  })\n\n  const handleSiteImageUpload = () => {\n    setFinderReference('siteMetadata.image')\n    finder.toggleSelector()\n  }\n\n  const handleSiteImageDelete = () => {\n    setValue('siteMetadata.image', '', {\n      shouldDirty: true\n    })\n  }\n\n  const handleOrganizationLogoUpload = () => {\n    setFinderReference('siteMetadata.organization.logo')\n    finder.toggleSelector()\n  }\n\n  const handleOrganizationLogoDelete = () => {\n    setValue('siteMetadata.organization.logo', '', {\n      shouldDirty: true\n    })\n  }\n\n  const disabled = !isDirty || !isValid\n\n  const onSubmit = (values: FormDataType) => {\n    onUpdate(values)\n\n    setDefaultValues(values)\n    reset(values)\n\n    toast({\n      title: 'Saved',\n      description: 'Your changes have been saved.',\n      status: 'success',\n      duration: 5000\n    })\n  }\n\n  const onReset = () => {\n    reset(defaultValues)\n  }\n\n  const currentWindowUrl =\n    typeof window !== 'undefined' ? window.location.href : ''\n\n  return (\n    <>\n      {finder.finderElement}\n      <Box px={{base: '4', md: '10'}} py=\"8\" maxWidth=\"3xl\" mx=\"auto\">\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <Stack spacing=\"4\" divider={<StackDivider />}>\n            <Heading size=\"lg\" as=\"h1\" paddingBottom=\"4\">\n              Settings\n            </Heading>\n            <FieldGroup title=\"Site Info\">\n              <VStack width=\"full\" spacing=\"6\">\n                <FormControl\n                  isRequired\n                  isInvalid={!!errors?.siteMetadata?.title}>\n                  <FormLabel>Title</FormLabel>\n                  <Input\n                    placeholder=\"Title\"\n                    {...register('siteMetadata.title', {\n                      required: 'Title is required',\n                      maxLength: {value: 100, message: 'Title is too long'}\n                    })}\n                  />\n                  <FormErrorMessage>\n                    {errors.siteMetadata?.title?.message}\n                  </FormErrorMessage>\n                </FormControl>\n\n                <FormControl\n                  isRequired\n                  isInvalid={!!errors?.siteMetadata?.siteUrl}>\n                  <FormLabel>Url</FormLabel>\n                  <Input\n                    placeholder={currentWindowUrl}\n                    {...register('siteMetadata.siteUrl', {\n                      required: 'Url is required',\n                      validate: {\n                        checkUrl: value =>\n                          value && !/^https?:\\/\\//.test(value)\n                            ? 'Url must start with http:// or https://'\n                            : undefined\n                      }\n                    })}\n                  />\n                  <FormErrorMessage>\n                    {errors.siteMetadata?.siteUrl?.message}\n                  </FormErrorMessage>\n                </FormControl>\n\n                <FormControl isInvalid={!!errors?.siteMetadata?.description}>\n                  <FormLabel>Description</FormLabel>\n                  <Textarea\n                    rows={5}\n                    placeholder=\"The description will be showed in SEO results on pages without their own descriptions.\"\n                    {...register('siteMetadata.description')}\n                  />\n                  {!errors.siteMetadata?.description && (\n                    <FormHelperText>\n                      Brief description for your site.\n                    </FormHelperText>\n                  )}\n\n                  <FormErrorMessage>\n                    {errors.siteMetadata?.description?.message}\n                  </FormErrorMessage>\n                </FormControl>\n\n                <FormControl id=\"image\">\n                  <FormLabel>Image</FormLabel>\n\n                  <Controller\n                    control={control}\n                    name=\"siteMetadata.image\"\n                    render={({field: {value}}) => (\n                      <Stack\n                        direction=\"row\"\n                        spacing=\"6\"\n                        align=\"center\"\n                        width=\"full\">\n                        <Avatar size=\"xl\" name=\"Site Logo\" src={value} />\n                        <Box>\n                          <HStack spacing=\"5\">\n                            <Button\n                              leftIcon={<HiCloudUpload />}\n                              onClick={handleSiteImageUpload}>\n                              Change photo\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              colorScheme=\"red\"\n                              onClick={handleSiteImageDelete}>\n                              Delete\n                            </Button>\n                          </HStack>\n                          <Text\n                            fontSize=\"sm\"\n                            mt=\"3\"\n                            color={useColorModeValue(\n                              'gray.500',\n                              'whiteAlpha.600'\n                            )}>\n                            Upload a photo to represent this site.\n                          </Text>\n                        </Box>\n                      </Stack>\n                    )}\n                  />\n                </FormControl>\n              </VStack>\n            </FieldGroup>\n\n            <FieldGroup title=\"Author\">\n              <VStack width=\"full\" spacing=\"6\">\n                <FormControl isInvalid={!!errors?.siteMetadata?.author?.name}>\n                  <FormLabel>Name</FormLabel>\n                  <Input\n                    placeholder=\"Emma Doe\"\n                    {...register('siteMetadata.author.name', {\n                      maxLength: {value: 100, message: 'Name is too long'}\n                    })}\n                  />\n                  <FormErrorMessage>\n                    {errors.siteMetadata?.author?.name?.message}\n                  </FormErrorMessage>\n                </FormControl>\n              </VStack>\n            </FieldGroup>\n            <FieldGroup title=\"Organisation\">\n              <VStack width=\"full\" spacing=\"6\">\n                <FormControl\n                  isInvalid={!!errors?.siteMetadata?.organization?.name}>\n                  <FormLabel>Name</FormLabel>\n                  <Input\n                    placeholder=\"Snek\"\n                    {...register('siteMetadata.organization.name', {\n                      maxLength: {value: 100, message: 'Name is too long'}\n                    })}\n                  />\n                  <FormErrorMessage>\n                    {errors.siteMetadata?.organization?.name?.message}\n                  </FormErrorMessage>\n                </FormControl>\n                <FormControl\n                  isInvalid={!!errors?.siteMetadata?.organization?.url}>\n                  <FormLabel>Url</FormLabel>\n                  <Input\n                    placeholder=\"https://snek.at\"\n                    {...register('siteMetadata.organization.url', {\n                      validate: {\n                        checkUrl: value =>\n                          value && !/^https?:\\/\\//.test(value)\n                            ? 'Url must start with http:// or https://'\n                            : undefined\n                      }\n                    })}\n                  />\n                  <FormErrorMessage>\n                    {errors.siteMetadata?.organization?.url?.message}\n                  </FormErrorMessage>\n                </FormControl>\n                <FormControl id=\"image\">\n                  <FormLabel>Image</FormLabel>\n\n                  <Controller\n                    control={control}\n                    name=\"siteMetadata.organization.logo\"\n                    render={({field: {value}}) => (\n                      <Stack\n                        direction=\"row\"\n                        spacing=\"6\"\n                        align=\"center\"\n                        width=\"full\">\n                        <Avatar\n                          size=\"xl\"\n                          name=\"Organisation Logo\"\n                          src={value}\n                        />\n                        <Box>\n                          <HStack spacing=\"5\">\n                            <Button\n                              leftIcon={<HiCloudUpload />}\n                              onClick={handleOrganizationLogoUpload}>\n                              Change photo\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              colorScheme=\"red\"\n                              onClick={handleOrganizationLogoDelete}>\n                              Delete\n                            </Button>\n                          </HStack>\n                          <Text\n                            fontSize=\"sm\"\n                            mt=\"3\"\n                            color={useColorModeValue(\n                              'gray.500',\n                              'whiteAlpha.600'\n                            )}>\n                            Upload a photo of your organisation.\n                          </Text>\n                        </Box>\n                      </Stack>\n                    )}\n                  />\n                </FormControl>\n              </VStack>\n            </FieldGroup>\n            <FieldGroup title=\"Language\">\n              <VStack width=\"full\" spacing=\"6\">\n                <LanguageSelect />\n              </VStack>\n            </FieldGroup>\n          </Stack>\n          <FieldGroup mt=\"8\">\n            <HStack width=\"full\">\n              <ButtonGroup isDisabled={disabled}>\n                <Button\n                  type=\"submit\"\n                  mr=\"4\"\n                  colorScheme=\"blue\"\n                  isLoading={isSubmitting}>\n                  Save Changes\n                </Button>\n                <Button variant=\"outline\" onClick={onReset}>\n                  Cancel\n                </Button>\n              </ButtonGroup>\n            </HStack>\n          </FieldGroup>\n        </form>\n      </Box>\n    </>\n  )\n}\n\nexport default SettingsTab\n","import {useAppDispatch, withRedux} from '@jaen/redux'\nimport {updateSiteMetadata} from '@jaen/redux/slices/site'\nimport {useSite} from '@jaen/services/site'\nimport {ISite} from '@jaen/types'\nimport SettingsTab from './components/Settings'\n\nexport const SettingsContainer = withRedux(() => {\n  const dispatch = useAppDispatch()\n  const data = useSite()\n\n  const handleUpdate = (data: ISite) => {\n    alert(`update site: ${JSON.stringify(data)}`)\n    if (data.siteMetadata) {\n      dispatch(updateSiteMetadata(data.siteMetadata))\n    }\n  }\n\n  return <SettingsTab data={data} onUpdate={handleUpdate} />\n})\n\nexport default SettingsContainer\n"],"names":["FieldGroup","props","title","children","flexProps","Stack","direction","base","md","spacing","py","Box","minW","Heading","as","fontWeight","fontSize","flexShrink","LanguageSelect","id","maxW","data","onUpdate","toast","useToast","React","defaultValues","setDefaultValues","reset","useForm","register","handleSubmit","setValue","control","formState","errors","isSubmitting","isDirty","isValid","finderReference","setFinderReference","finder","useSnekFinder","mode","onAction","action","type","imageUrl","payload","item","src","shouldDirty","handleSiteImageUpload","toggleSelector","handleSiteImageDelete","handleOrganizationLogoUpload","handleOrganizationLogoDelete","disabled","currentWindowUrl","window","location","href","finderElement","px","maxWidth","mx","onSubmit","values","description","status","duration","divider","StackDivider","size","paddingBottom","VStack","width","isRequired","isInvalid","siteMetadata","placeholder","required","maxLength","value","message","siteUrl","validate","checkUrl","test","undefined","rows","name","render","field","align","HStack","leftIcon","onClick","variant","colorScheme","Text","mt","color","useColorModeValue","author","organization","url","isDisabled","mr","isLoading","SettingsContainer","withRedux","dispatch","useAppDispatch","useSite","Settings","alert","JSON","stringify","updateSiteMetadata"],"sourceRoot":""}