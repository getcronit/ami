{"version":3,"file":"component---src-templates-product-page-template-tsx-bb0b3790047dfed0ccae.js","mappings":"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","sources":["webpack://jaen-template-shopify/./src/services/wishlist.ts","webpack://jaen-template-shopify/./src/templates/ProductPageTemplate.tsx"],"sourcesContent":["import {ShopifyProduct} from '@snek-at/gatsby-theme-shopify'\nimport {IGatsbyImageData} from 'gatsby-plugin-image'\nimport React from 'react'\n\nexport interface WishlistProduct {\n  id: string\n  handle: string\n  title: string\n  price: number\n  compareAtPrice: number | null\n  priceFormatted: string\n  compareAtPriceFormatted: string | null\n  categoriesString: string\n  tagsString: string\n  featuredMedia: ShopifyProduct['featuredMedia']\n  quantity: number\n}\n\nexport class WishlistService {\n  static key = 'wishlist'\n\n  constructor() {}\n\n  static setWishlist(list: WishlistProduct[]) {\n    if (typeof window === 'undefined') return\n\n    localStorage.setItem(WishlistService.key, JSON.stringify(list))\n  }\n\n  static getWishlist(): WishlistProduct[] {\n    if (typeof window === 'undefined') return []\n\n    return JSON.parse(window.localStorage.getItem(WishlistService.key) || '[]')\n  }\n\n  static addToWishlist(product: WishlistProduct) {\n    const wishList = WishlistService.getWishlist()\n    wishList.push(product)\n\n    WishlistService.setWishlist(wishList)\n  }\n\n  static updateQuantity(productId: string, quantity: number) {\n    const wishList = WishlistService.getWishlist()\n    const product = wishList.find(p => p.id === productId)\n\n    if (product) {\n      product.quantity = quantity\n    }\n\n    WishlistService.setWishlist(wishList)\n  }\n\n  static removeFromWishlist(productId: string) {\n    const wishList = WishlistService.getWishlist()\n    const index = wishList.findIndex(p => p.id === productId)\n\n    if (index === -1) return\n\n    wishList.splice(index, 1)\n\n    WishlistService.setWishlist(wishList)\n  }\n}\n\nexport function useWishlist() {\n  const [wishlist, setWishlist] = React.useState(WishlistService.getWishlist())\n\n  React.useEffect(() => {\n    const wishlist = WishlistService.getWishlist()\n    setWishlist(wishlist)\n  }, [])\n\n  return {\n    wishlist,\n    addToWishlist: (product: WishlistProduct) => {\n      WishlistService.addToWishlist(product)\n      setWishlist(WishlistService.getWishlist())\n    },\n    updateQuantity: (productId: string, quantity: number) => {\n      WishlistService.updateQuantity(productId, quantity)\n      setWishlist(WishlistService.getWishlist())\n    },\n    removeFromWishlist: (productId: string) => {\n      WishlistService.removeFromWishlist(productId)\n      setWishlist(WishlistService.getWishlist())\n    }\n  }\n}\n","import {SEO, useAnalytics} from '@jaenjs/jaen'\nimport {\n  getFormattedProductPrices,\n  getProductTags,\n  ProductPageContext,\n  ProductPageData\n} from '@snek-at/gatsby-theme-shopify'\nimport {graphql, PageProps} from 'gatsby'\nimport React from 'react'\nimport {Layout} from '../components/Layout'\nimport {ProductTemplate} from '../components/templates'\nimport {useWishlist} from '../services/wishlist'\n\nconst ProductPageTemplate = (\n  props: PageProps<ProductPageData, ProductPageContext>\n) => {\n  const {shopifyProduct, relatedProducts} = props.data\n\n  const {wishlist, addToWishlist, removeFromWishlist} = useWishlist()\n\n  const isOnWishList = wishlist.some(item => item.id === shopifyProduct.id)\n\n  const analytics = useAnalytics()\n\n  console.log(`isOnWishList: ${isOnWishList}`)\n\n  const handleWishlistAdd = (id: string) => {\n    if (!isOnWishList) {\n      const {\n        priceFormatted,\n        compareAtPriceFormatted\n      } = getFormattedProductPrices(shopifyProduct)\n\n      const {price, compareAtPrice} = shopifyProduct.variants[0]\n\n      const tags = getProductTags(shopifyProduct)\n\n      const payload = {\n        id,\n        handle: shopifyProduct.handle,\n        title: shopifyProduct.title,\n        price,\n        compareAtPrice,\n        priceFormatted,\n        compareAtPriceFormatted,\n        featuredMedia: shopifyProduct.featuredMedia,\n        categoriesString: tags.categoryString,\n        tagsString: tags.otherString,\n        quantity: 1\n      }\n\n      analytics.track('wishlist-add', {\n        id,\n        handle: shopifyProduct.handle,\n        title: shopifyProduct.title\n      })\n\n      addToWishlist(payload)\n    } else {\n      analytics.track('wishlist-remove', {\n        id\n      })\n\n      removeFromWishlist(id)\n    }\n  }\n\n  const buildProductPageMeta = () => {\n    let title = shopifyProduct.title\n    let description =\n      shopifyProduct.description +\n      ` | Produkttyp: ${shopifyProduct.productType}` +\n      ` | Hersteller: ${shopifyProduct.vendor}`\n\n    return {\n      title,\n      description,\n      image:\n        shopifyProduct.featuredMedia?.image.gatsbyImageData.images.fallback\n          ?.src,\n      datePublished: shopifyProduct.createdAt\n    }\n  }\n\n  return (\n    <>\n      <SEO pagePath={props.path} pageMeta={buildProductPageMeta()} />\n      <Layout path={props.path}>\n        <ProductTemplate\n          path={props.path}\n          shopifyProduct={props.data.shopifyProduct}\n          relatedProducts={props.data.relatedProducts}\n          onWishlistAdd={handleWishlistAdd}\n          isOnWishList={isOnWishList}\n        />\n      </Layout>\n    </>\n  )\n}\n\nexport const query = graphql`\n  query($productId: String!, $relatedProductIds: [String!]!) {\n    relatedProducts: allShopifyProduct(filter: {id: {in: $relatedProductIds}}) {\n      nodes {\n        ...shopifyProductData\n      }\n    }\n    shopifyProduct(id: {eq: $productId}) {\n      ...shopifyProductData\n    }\n  }\n`\n\nexport default ProductPageTemplate\n"],"names":["WishlistService","constructor","list","window","localStorage","setItem","key","JSON","stringify","parse","getItem","product","wishList","getWishlist","push","setWishlist","productId","quantity","find","p","id","index","findIndex","splice","useWishlist","wishlist","React","addToWishlist","updateQuantity","removeFromWishlist","props","shopifyProduct","relatedProducts","data","isOnWishList","some","item","analytics","useAnalytics","console","log","_jsxs","_jsx","SEO","pagePath","path","pageMeta","title","description","productType","vendor","image","featuredMedia","_shopifyProduct$featu","gatsbyImageData","images","fallback","_shopifyProduct$featu2","src","datePublished","createdAt","Layout","ProductTemplate","onWishlistAdd","track","priceFormatted","compareAtPriceFormatted","getFormattedProductPrices","price","compareAtPrice","variants","tags","getProductTags","payload","handle","categoriesString","categoryString","tagsString","otherString"],"sourceRoot":""}